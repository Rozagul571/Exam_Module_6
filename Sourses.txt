For Email snet code:
    https://realpython.com/python-send-email/


import smtplib, ssl

port = 465
smtp_server = "smtp.gmail.com"
sender_email = "nodirbekovarozagul@gmail.com"
receiver_email = "sokhibjonovna.sh1@gmail.com"
password = "vvbqnhjruknpepal"

message = "Hi, Shahnozabonu Sister"

context = ssl.create_default_context()
with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, message)


r_num = random.randrange(10**5, 10**6) #6 xonali son Generatsiya qilish uchun




^\+998(33|55|77|88|90|91|93|94|95|97|98|99)\d{7}$

transations:

apps/fixtures/regions.json


[
  {
    "model": "apps.Region",
    "pk": 1,
    "fields": {
      "name": "Toshkent"
    }
  },
  {
    "model": "apps.Region",
    "pk": 2,
    "fields": {
      "name": "Samarqand"
    }
  },
  {
    "model": "apps.Region",
    "pk": 3,
    "fields": {
      "name": "Jizzah"
    }
  }
]


python3 manage.py loaddata regions.json

1. .dockerignore add
.venv
.idea
2.
create requirements.txt
pip freeze > requirements.txt
3.
Dockerfile add
FROM python:3.12-alpine

WORKDIR app. # ish joyi
COPY . . # tashqi projectni imagega ko'chirish
RUN pip install -r requirements.txt # image qurish vaqtida ishga tushadi




root.settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',   # SQLTILE
        'NAME': "test_db",
        "HOST" : "localhost",
        "USER": "postgres",
        "PORT": 5432,
        "PASSWORD":1
    }
}


SQLITE UCHUN
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent SHU JOYINI QARAB QOY

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',  # SQLite fayli loyiha ildizida saqlanadi
    }
}
python manage.py makemigrations
python manage.py migrate


5. create file docker-compose.yml

version: "2.33.0"


services:
  db:
    image: postgres:alpine
    container_name: django_pg
    restart: always
    ports:
      - 5433:5432
    environment:
      POSTGRES_PASSWORD: 1
    volumes:
      - pgdata:/var/lib/postgresql/data


  django_p28:
    build: .
    container_name: django_p28_con
    restart: always
    command: sh -c  "python3 manage.py makemigrations && python3 manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - 8001:8000
    depends_on:
      - db


volumes:
  pgdata:

Terminaldada command

docker ps # ishlab turgan containerlarni ro'yhatini ko'rish
docker ps -a # hamma containerlarni ro'yhatini ko'rish
docker compose up # docker-compose faylni ishga tushiradi va containerlarni yaratadi


docker compose down # docker-compose yaratgan barcha containerlarni o'chirib yuboradi

===============================================================================================================================
Image’ni yaratish: Dockerfile’dan image yaratish uchun

docker build -t myproject:latest .
-t myproject:latest: Image’ga nom va teglar beradi.

Konteynerni ishga tushirish

docker run -p 8000:8000 myproject:latest

docker-compose up --build

Image’ni Docker Hub’ga yuklash (ixtiyoriy):
Docker Hub’da hisob yarating.
Image’ga teglar qo‘ying

docker tag myproject:latest yourusername/myproject:latest

Yuklash


docker push yourusername/myproject:latest





